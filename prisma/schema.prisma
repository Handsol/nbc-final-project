// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth 모델 정의
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade) 
  @@unique([provider, providerAccountId])
}
model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique @map("session_token")
  userId        String   @map("user_id")
  expires       DateTime
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade) 
}
model VerificationToken {
  identifier String   @id @default(cuid())
  token      String
  expires    DateTime
  @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  name          String?      //구글하고 맞추기위해
  nickname      String?      
  bio           String?      
  email         String       @unique
  emailVerified DateTime?
  image         String?      //구글하고 맞추기위해
  points        Int          @default(0)
  accounts      Account[]
  sessions      Session[]
  habits        Habit[]
  teamMembers   TeamMember[]
  teamComments  TeamComment[]
}

model Habit {
  id            String    @id @default(cuid())
  userId        String    
  title         String
  notes         String?
  categories    String?
  createdAt     DateTime  @default(now()) 
  lastCompleted DateTime? 
  repeats       String    @default("[]")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id              String        @id @default(cuid())
  teamName        String        
  teamBio         String        
  totalPoints     Int           @default(0) 
  createdAt       DateTime      @default(now()) 
  emblem          String
  completedQuests Int           @default(0) 
  currentQuestId  Int           
  teamMembers     TeamMember[]
  quests          Quest[]
  teamComments    TeamComment[]
  teamQuests      TeamQuest[]
}

model Quest {
  id             Int       @id @default(autoincrement())
  questName      String    
  requiredPoints Int       
  teams          Team[]    @relation
  teamQuests     TeamQuest[]
}

model TeamComment {
  id         String    @id @default(cuid())
  userId     String    
  teamId     String    
  createdAt  DateTime  
  comment    String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id              String    @id @default(cuid())
  userId          String    
  teamId          String    
  joinDate        DateTime  
  contributePoints Int      
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team            Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model TeamQuest {
  teamId         String    
  questId        Int       
  progressPoints Int       @default(0) 
  team           Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  quest          Quest     @relation(fields: [questId], references: [id], onDelete: Cascade)
  @@id([teamId, questId])
}